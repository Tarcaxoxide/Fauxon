__NULL
    null is it's own token in this langauge.
__PLUS
    the regular '+'.
__MINUS
    the regular '-'.
__MULTIPLY
    the regular '*'.
__DIVIDE
    the regular '/'.
__INT
    a whole number.
__FLOAT
    a decimal number.
__WORD
    1 more more __SINGLE_LETTER.
__PERIOD
    a period '.'.
__SINGLE_NUMBER
    any single numerical char.
__SINGLE_LETTER
    any single char between a and z or between A and Z.
__EQUAL
    "A = B" makes A be the same as B and returns A.
    if "A" and "B" are 10 and C is 15 then
    "A=B=C" now they're all 15
__LESS
    "A < B" returns 1 if A is less than B.
__MORE
    "A > B" returns 1 if A is greater than B.
__LEFT_PARENTHESIS
    this '('.
__RIGHT_PARENTHESIS
    this ')'.
__EQUAL_EQUAL
    "A == B" returns 1 if both are the same.
__LESS_EQUAL
    "A <= B" returns 1 if A is less or the same as B.
__MORE_EQUAL
    "A >= B" returns 1 if A is greater or the same as B.
__QUESTION
    "?A" prints the value of A and returns it (great for debugging *winks*).
    so basically like if you did this "A = ?B" it'll print out the value of B
        and then continue with the assignment operator as normal. 
__COLON
    this ':'.
__SHIFT_RIGHT
    "A:>B:>C" sets B to A then sets C to B's old value.
__SHIFT_LEFT
    "A<:B<:C" sets B to C then sets A to B's old value.
__BIN_OP
    "A B C" stores together the value A, the operator B, and the value C. 
__UNARY_OP
    "A B" stores together the value B and the operator A.
__ERROR
    this token is provided when there has been an error,
    its value is the error message.
__EOF
    is provided when the end has been reach.
    take note that empty lines count as "end", this is intentional
        for debbugging code so you can prematurely end the execution
        by providing an empty line.

#Notes/Examples

say you want a few things to be executed in a loop infinitely.
all you need a 2 or more values to act as function references.
```
    A=function1
    B=function2
    C=function3
    A()<:B<:C<:A
```
first it will execute A
then set A to function2
then set B to function3
then set C to function1
then it will repeat because A now has a new value.
(this isn't implemented yet but this is how i want it to work.)